<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.james.concurrency.mapper.BankAccountMapper">
    <resultMap id="BaseResultMap" type="com.james.concurrency.dataobject.BankAccount">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="balance" jdbcType="INTEGER" property="balance" />
    </resultMap>
    <sql id="Base_Column_List">
        id, name, balance, create_date
    </sql>

    <insert id="insert" parameterType="com.james.concurrency.dataobject.BankAccount">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into `bank_account` (name, balance, create_date)
        values (#{name,jdbcType=VARCHAR}, #{balance,jdbcType=INTEGER}, now())
    </insert>

    <delete id="deleteByName">
        delete from `bank_account` where `name` = #{name,jdbcType=VARCHAR}
    </delete>

    <!--flushCache="true" 禁用一级缓存-->
    <select id="selectById"  resultMap="BaseResultMap" flushCache="true">
        select
            <include refid="Base_Column_List"/>
        from
            `bank_account`
        where
            `id` = #{id,jdbcType=BIGINT}
    </select>

    <select id="selectByIdForUpdate" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from
            `bank_account`
        where
            `id` = #{id,jdbcType=BIGINT}
        FOR UPDATE
    </select>

    <select id="selectByIdLockInShareMode" resultMap="BaseResultMap">
        select
            <include refid="Base_Column_List"/>
        from
            `bank_account`
        where
            `id` = #{id,jdbcType=BIGINT}
        LOCK IN SHARE MODE
    </select>

    <select id="selectListByBalanceGt" resultMap="BaseResultMap" flushCache="true">
        select
            <include refid="Base_Column_List"/>
        from
            `bank_account`
        where
            `balance` > #{balance,jdbcType=INTEGER}
    </select>

    <select id="selectListByBalanceGtForUpdate" resultMap="BaseResultMap" flushCache="true">
        select
            <include refid="Base_Column_List"/>
        from
            `bank_account`
        where
            `balance` > #{balance,jdbcType=INTEGER}
        FOR UPDATE
    </select>

    <update id="updateBalanceById">
        update
            `bank_account`
        set
            `balance` = #{balance,jdbcType=INTEGER}
        where
            id = #{id,jdbcType=BIGINT}
    </update>

    <update id="atomicUpdateBalanceByCostAndId">
        update
            `bank_account`
        set
            `balance` = `balance` - #{cost,jdbcType=INTEGER}
        where
            id = #{id,jdbcType=BIGINT}
    </update>

</mapper>